scalar Date

"General pagination information"
type PaginationInfo {
  totalPages: Int!
  currentPage: Int!
  isLastPage: Boolean!
}

type BookSummary {
  totalBooks: Int!
}

type ReviewSummary {
  total: Int!
}

"Paginated list of books"
type BookPagination {
  books: [Book!]!
  pagination: PaginationInfo!
  summary: BookSummary!
}

type Book {
  "Unique identifier for the book"
  id: ID!
  "Title of the book"
  title: String!
  "The series the book belongs to, if any"
  series: String
  "List of authors of the book"
  authors: [Author!]!
  "Description of the book"
  description: String!
  "Language of the book"
  language: String!
  "ISBN number of the book"
  isbn: String!
  "List of genres the book belongs to"
  genres: [Genre!]!
  "List of characters in the book"
  characters: [String!]
  "Format of the book (e.g., hardcover, paperback, ebook)"
  bookFormat: String!
  "Number of pages in the book"
  pages: Int!
  "Publisher of the book"
  publisher: Publisher!
  "Date the book was published"
  publishDate: Date!
  "List of awards the book has received"
  awards: [String!]
  "Weighted sum of the ratings."
  rating: Float!
  "Total number of ratings."
  numRatings: Int!
  "Setting of the book. A list of locations/periods where the book takes place"
  setting: [String!]
  "URL for the cover image of the book"
  coverImg: String!
  "Position of the book in the series"
  numberInSeries: Int
}

type User {
  UUID: ID!
  name: String!
  at: Date
  wantToRead: [Book]
  haveRead: [Book]
}

type Author {
  "Name of the author"
  name: ID!
}

type Genre {
  "Name of the genre"
  name: ID!
}

type Publisher {
  "Name of the publisher"
  name: ID!
}

type Review {
  "id for review"
  UUID: ID!
  description: String!
  rating: Float!
  at: Date!
  user: User
  book: Book
}

type ReviewPagination {
  reviews: [Review!]!
  pagination: PaginationInfo!
  summary: ReviewSummary!
}

type updatedRating {
  rating: Float!
}

type Query {
  "Retrieve a list of books with optional filters"
  books(
    search: String
    limit: Int
    offset: Int
    sortInput: SortInput
    beforeDate: Date
    afterDate: Date
    authors: [String!] # String instead of ID, because when storing the author string in the URL, we lose the object ID
    genres: [String!]
    publishers: [String!]
  ): BookPagination!

  "Retrieve a specific book based on id"
  book(id: String!): Book!

  user(UUID: String!): User!

  "Retrieve book reviews"
  bookReviews(
    bookID: String
    limit: Int!
    offset: Int!
    avoidUserUUID: String
    focusUserUUID: String
  ): ReviewPagination!

  bookReview(bookID: String!, userUUID: String!): Review

  "Retrieve a list of authors"
  authors: [Author!]!

  "Retrieve a list of genres"
  genres: [Genre!]!

  "Retrieve a list of publishers"
  publishers: [Publisher!]!
}

input CreateReviewInput {
  userUUID: String!
  bookID: String!
  description: String!
  rating: Float!
}

input UpdateReviewInput {
  reviewUUID: String!
  description: String!
  rating: Float!
}

type Mutation {
  createUser: User!

  createReview(input: CreateReviewInput!): updatedRating!

  updateReview(input: UpdateReviewInput!): updatedRating
}

enum SortOrder {
  "Sort in ascending order"
  asc
  "Sort in descending order"
  desc
}

enum SortBy {
  "Sort by book name"
  bookName
  "Sort by author name"
  authorName
  "Sort by publisher name"
  publisherName
}

input SortInput {
  sortBy: SortBy!
  sortOrder: SortOrder!
}
